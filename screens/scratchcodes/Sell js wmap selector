/* import React, { useEffect, useState } from 'react';
import { View, Text, StyleSheet, TouchableOpacity, Image, TextInput,
  ScrollView, Modal, Alert } from 'react-native';
import Icon from 'react-native-vector-icons/FontAwesome';
import * as ImagePicker from 'expo-image-picker';
import { addDoc, getDocs, collection } from 'firebase/firestore';
import { productsCollection, db } from '../config/firebase';
import { getAuth } from 'firebase/auth';
import { getStorage, ref, uploadBytes, getDownloadURL } from 'firebase/storage';
import MapSelector from './MapSelector'
import { Timestamp } from 'firebase/firestore';

const Sell = ({ navigation }) => {

  const [userEmail, setUserEmail] = useState(null);
  const [productInfo, setProductInfo] = useState({
    photo: null,
    name: '',
    price: '',
    category: '',
    location: '',
    description: '',
    quantity: 1,
  });
  const [showModal, setShowModal] = useState(false);
  const [missingFields, setMissingFields] = useState({
    photo: false,
    name: false,
    price: false,
    category: false,
    description: false,
    quantity: false,
  });

  useEffect(() => {
    const auth = getAuth();
    const user = auth.currentUser;
    if (user !== null) {
      setUserEmail(user.email);
    }
  }, []);

  const handleBackPress = () => {
    navigation.goBack();
  };

  const uploadImageAsync = async (uri) => {
    try {
      const response = await fetch(uri);
      const blob = await response.blob();
  
      const storage = getStorage();
      const storageRef = ref(storage, 'images/' + Date.now());
      await uploadBytes(storageRef, blob);
  
      blob.close();
  
      return await getDownloadURL(storageRef);
    } catch (error) {
      console.error("Detailed error: ", error.message);
      throw error;
    }
  };  

  const handleChoosePhoto = () => {
    setIsPhotoPickerModalVisible(true);
  };  

  const [isPhotoPickerModalVisible, setIsPhotoPickerModalVisible] = useState(false);

  const PhotoPickerModal = ({ isVisible, onCancel }) => (
    <Modal
      visible={isVisible}
      onRequestClose={onCancel}
      animationType="slide"
      transparent={true}
    >
      <View style={styles.modalOverlayPhoto}>
        <View style={styles.modalContainerPhoto}>
          <TouchableOpacity style={styles.cancelButtonTopRight} onPress={onCancel}>
            <Icon name="times" size={24} color="#fff" />
          </TouchableOpacity>
          <Text style={styles.modalHeader}>Select Photo</Text>
          <Text style={styles.modalSubHeader}>Choose a photo from the gallery or take a new one.</Text>
          <View style={styles.photoOptionsContainer}>
            <TouchableOpacity
              style={[styles.photoOption, styles.separateBorder]}
              onPress={async () => {
                await pickImage('library');
                onCancel();
              }}
            >
              <Icon name="photo" size={80} color="#fff" />
            </TouchableOpacity>
            <TouchableOpacity
              style={[styles.photoOption, styles.separateBorder]}
              onPress={async () => {
                await pickImage('camera');
                onCancel();
              }}
            >
              <Icon name="camera" size={80} color="#fff" />
            </TouchableOpacity>
          </View>
        </View>
      </View>
    </Modal>
  );  
  
  const pickImage = async (type) => {
    let result;
    if (type === "camera") {
      result = await ImagePicker.launchCameraAsync({
        mediaTypes: ImagePicker.MediaTypeOptions.Images,
        allowsEditing: true,
        aspect: [4, 3],
        quality: 1,
      });
    } else {
      result = await ImagePicker.launchImageLibraryAsync({
        mediaTypes: ImagePicker.MediaTypeOptions.Images,
        allowsEditing: true,
        aspect: [4, 3],
        quality: 1,
      });
    }
  
    if (!result.canceled && result.assets) {
      const uploadUrl = await uploadImageAsync(result.assets[0].uri);
      setProductInfo({ ...productInfo, photo: uploadUrl });
    }
};

const handleSubmit = async () => {
  if (!validateForm()) return;

  try {
    const createdAt = Timestamp.fromDate(new Date());

    await addDoc(productsCollection, {
      photo: productInfo.photo,
      name: productInfo.name,
      price: productInfo.price,
      category: productInfo.category,
      description: productInfo.description,
      location: productInfo.location,
      seller_email: userEmail,
      quantity: productInfo.quantity,
      createdAt,
    });

    Alert.alert(`${productInfo.name} successfully Added!`);
    resetProductInfo();
    setShowModal(false);
  } catch (error) {
    console.error("Error adding document: ", error);
  }
};

  const resetProductInfo = () => {
    setProductInfo({
      photo: null,
      name: '',
      price: '',
      category: '',
      description: '',
      quantity: 1,
      location: '',
    });
  };

  const handleCancel = () => {
    setShowModal(false);
  };

  const validateForm = () => {
    const missing = {
      photo: !productInfo.photo,
      name: !productInfo.name,
      price: !productInfo.price,
      category: productInfo.category === '',
      description: !productInfo.description,
      location: !productInfo.location,
      quantity: quantity < 1,
    };

    setMissingFields(missing);
    
    let valid = true;
    Object.values(missing).forEach((value) => {
      if (value) valid = false;
    });

    if (!valid) {
      Alert.alert(
        'Missing Information',
        'Please make sure all fields are filled correctly.',
        [{ text: 'OK' }]
      );
    }

    return valid;
  };

  const handlePriceChange = (text) => {
    const newText = text.replace(/[^0-9.]/g, '');
    setProductInfo({ ...productInfo, price: newText });
  };
  
  const handlePriceBlur = () => {
    let price = parseFloat(productInfo.price);
    if (!isNaN(price)) {
      setProductInfo({ ...productInfo, price: price.toFixed(2) });
    }
  };

  const handleAddProductToSell = () => {
    if (validateForm()) {
      setShowModal(true);
    }
  };

  const [categories, setCategories] = useState([]);

  useEffect(() => {
    const fetchCategories = async () => {
      const querySnapshot = await getDocs(collection(db, "categories"));
      const fetchedCategories = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      }));
      setCategories(fetchedCategories);
    };

    fetchCategories();
  }, []);

  const [isCategoryModalVisible, setIsCategoryModalVisible] = useState(false);

const handleCategorySelect = (category) => {
  setProductInfo({ ...productInfo, category: category.title });
  setIsCategoryModalVisible(false);
};

const CategoryPickerModal = ({ isVisible, categories, onCategorySelect, onCancel }) => (
  <Modal
    visible={isVisible}
    onRequestClose={onCancel}
    animationType="slide"
    transparent={true}
  >
    <View style={styles.modalOverlay}>
      <View style={styles.modalContainer}>
        <ScrollView>
          {categories.map((category) => (
            <TouchableOpacity
              key={category.id}
              style={styles.categoryOption}
              onPress={() => onCategorySelect(category)}
            >
              <Text style={styles.categoryOptionText}>{category.title}</Text>
            </TouchableOpacity>
          ))}
        </ScrollView>
        <TouchableOpacity style={styles.cancelButtonCategories} onPress={onCancel}>
          <Text style={styles.cancelTextCategories}>Cancel</Text>
        </TouchableOpacity>
      </View>
    </View>
  </Modal>
);

const ProductModal = ({ productInfo, isVisible, onCancel, onSubmit }) => {
  return (
    <Modal
      visible={isVisible}
      onRequestClose={onCancel}
      animationType="slide"
      transparent={true}
    >
      <View style={styles.modalOverlay}>
        <View style={styles.modalContainer}>
          <ScrollView contentContainerStyle={styles.modalContent}>
            <Text style={styles.modalTitle}>Product Confirmation</Text>
            {productInfo.photo && (
              <Image source={{ uri: productInfo.photo }} style={styles.productImage} />
            )}
            <View style={styles.productDetails}>
              <Text style={styles.productDetailText}>Name: {productInfo.name}</Text>
              <Text style={styles.productDetailText}>Price: {productInfo.price}</Text>
              <Text style={styles.productDetailText}>Category: {productInfo.category}</Text>
              <Text style={styles.productDetailText}>Location: {productInfo.location}</Text>
              <Text style={styles.productDetailText}>Quantity: {productInfo.quantity}</Text>
              <Text style={styles.productDetailText}>Description: {productInfo.description}</Text>
            </View>
          </ScrollView>
          <View style={styles.modalButtons}>
            <TouchableOpacity style={styles.cancelButton} onPress={onCancel}>
              <Text style={styles.cancelText}>Cancel</Text>
            </TouchableOpacity>
            <TouchableOpacity style={styles.submitButton} onPress={onSubmit}>
              <Text style={styles.submitText}>Submit</Text>
            </TouchableOpacity>
          </View>
        </View>
      </View>
    </Modal>
  );
};

  const [quantity, setQuantity] = useState(1);

  const incrementQuantity = () => {
    setProductInfo(prevProductInfo => ({
      ...prevProductInfo,
      quantity: Number(prevProductInfo.quantity) + 1,
    }));
  };
  
  const decrementQuantity = () => {
    setProductInfo(prevProductInfo => ({
      ...prevProductInfo,
      quantity: prevProductInfo.quantity > 1 ? Number(prevProductInfo.quantity) - 1 : 1,
    }));
  };

  const [isMapVisible, setIsMapVisible] = useState(false);

  const handleLocationSelect = (locationName) => {
    setProductInfo({ ...productInfo, location: locationName });
    setIsMapVisible(false);
  };

  const openMap = () => {
    setIsMapVisible(true);
  };

  const locationDisplay = productInfo.location 
  ? productInfo.location
  : 'Select location using map';

  const handleQuantityChange = (text) => {
    const newText = text.replace(/[^0-9]/g, ''); 
    if (newText !== '') {
      setProductInfo({ ...productInfo, quantity: parseInt(newText, 10) });
    } else {
      setProductInfo({ ...productInfo, quantity: '' });
    }
  };

  return (
    <View style={styles.container}>
      <PhotoPickerModal
        isVisible={isPhotoPickerModalVisible}
        onCancel={() => setIsPhotoPickerModalVisible(false)}
      />
      <ProductModal 
        productInfo={productInfo}
        isVisible={showModal}
        onCancel={handleCancel}
        onSubmit={handleSubmit}
      />

      <View style={styles.header}>
        <TouchableOpacity onPress={handleBackPress}>
          <Icon name="arrow-left" size={24} color="#05652D" style={styles.backButtonIcon} />
        </TouchableOpacity>
        <Text style={styles.title}>Sell Eco-Friendly Product</Text>
      </View>
      <ScrollView style={styles.content}>
      <Text style={styles.label}>
        Product Photo:
        {missingFields.photo && <Text style={{ color: 'red' }}> *</Text>}
      </Text>
        <TouchableOpacity style={styles.addPhotoContainer} onPress={handleChoosePhoto}>
          {productInfo.photo ? (
            <Image source={{ uri: productInfo.photo }} style={styles.productImage} />
          ) : (
            <Icon name="camera" size={24} color="#D3D3D3" style={styles.addPhotoIcon} />
          )}
          <Text style={styles.addPhotoText}> Add Photo</Text>
        </TouchableOpacity>
        <Text style={styles.label}>
          Product Name:
          {missingFields.photo && <Text style={{ color: 'red' }}> *</Text>}
        </Text>
        <TextInput
          style={[styles.input, missingFields.name && styles.missingField]}
          placeholder="Enter Product Name"
          value={productInfo.name}
          onChangeText={(text) => setProductInfo({ ...productInfo, name: text })}
        />
        <Text style={styles.label}>
          Price (PHP):
            {missingFields.price && <Text style={{ color: 'red' }}> *</Text>}
          </Text>
          <TextInput
              style={[styles.input, missingFields.price && styles.missingField]}
              placeholder="Enter Price"
              keyboardType="numeric"
              value={productInfo.price}
              onChangeText={handlePriceChange}
              onBlur={handlePriceBlur}
          />

            <Text style={styles.label}>
                Category:
                {missingFields.category && <Text style={{ color: 'red' }}> *</Text>}
              </Text>
              <TouchableOpacity
                style={[styles.input, styles.pickerInput, missingFields.category && styles.missingField]}
                onPress={() => setIsCategoryModalVisible(true)}
              >
                <Text style={styles.inputText}>
                  {productInfo.category || "Select Category"}
                </Text>
              </TouchableOpacity>

          <CategoryPickerModal
            isVisible={isCategoryModalVisible}
            categories={categories}
            onCategorySelect={handleCategorySelect}
            onCancel={() => setIsCategoryModalVisible(false)}
          />
        <Text style={styles.label}>
            Location
            {missingFields.location && <Text style={{ color: 'red' }}> *</Text>}
          </Text>
          <TouchableOpacity style={styles.input} onPress={openMap}>
            <Text>{locationDisplay}</Text>
          </TouchableOpacity>

          <Text style={styles.label}>
          Quantity:
          {missingFields.photo && <Text style={{ color: 'red' }}> *</Text>}
        </Text>
        <View style={styles.quantityContainer}>
          <TouchableOpacity onPress={decrementQuantity} style={styles.quantityButton}>
            <Icon name="minus" size={16} color="#05652D" />
          </TouchableOpacity>
          <TextInput
            style={[styles.input, styles.quantityInput, missingFields.quantity && styles.missingField]}
            keyboardType="numeric"
            value={String(productInfo.quantity)}
            onChangeText={handleQuantityChange}
          />
          <TouchableOpacity onPress={incrementQuantity} style={styles.quantityButton}>
            <Icon name="plus" size={16} color="#05652D" />
          </TouchableOpacity>
        </View>
        <Text style={styles.label}>
          Product Description:
          {missingFields.photo && <Text style={{ color: 'red' }}> *</Text>}
        </Text>
        <TextInput
          style={[styles.input, styles.descriptionInput, missingFields.description && styles.missingField]}
          placeholder="Enter Product Description"
          value={productInfo.description}
          onChangeText={(text) => setProductInfo({ ...productInfo, description: text })}
          multiline={true}
          numberOfLines={4}
        />
        <TouchableOpacity style={styles.addButton} onPress={handleAddProductToSell}>
          <Text style={styles.addButtonLabel}>Add Product to Sell</Text>
        </TouchableOpacity>
      </ScrollView>
      <Modal
        visible={isMapVisible}
        onRequestClose={() => setIsMapVisible(false)}
        animationType="slide"
        transparent={true}
      >
        <MapSelector onLocationSelect={handleLocationSelect} />
      </Modal>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
  },
  header: {
    paddingTop: 10,
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#E3FCE9',
    paddingVertical: 10,
    paddingHorizontal: 20,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.3,
    shadowRadius: 2,
    elevation: 3,
    backgroundColor: '#E3FCE9',
  },
  backButtonIcon: {
    marginRight: 10,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#05652D',
    marginLeft: 10,
  },
  content: {
    flex: 1,
    padding: 20,
  },
  label: {
    fontSize: 16,
    fontWeight: 'bold',
    marginBottom: 10,
    color: '#000',
  },
  addPhotoContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 20,
  },
  addPhotoIcon: {
    marginRight: 10,
  },
  addPhotoText: {
    color: '#D3D3D3',
  },
  input: {
    borderWidth: 0,
    borderColor: 'transparent',
    borderBottomWidth: 1,
    borderBottomColor: '#D3D3D3',
    paddingVertical: 10,
    paddingHorizontal: 16,
    marginBottom: 20,
    backgroundColor: '#FFF',
    color: '#000',
  },
  addButton: {
    backgroundColor: '#05652D',
    paddingVertical: 12,
    borderRadius: 5,
    alignItems: 'center',
    marginBottom: 30,
  },
  addButtonLabel: {
    color: '#FFF',
    fontSize: 16,
    fontWeight: 'bold',
  },
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  modalContainer: {
    width: '100%',
    maxHeight: '90%',
    padding: 20,
    borderRadius: 15,
    backgroundColor: '#FFF',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.5,
    shadowRadius: 4,
    elevation: 5,
    alignItems: 'center', 
  },
  modalTitle: {
    fontSize: 26,
    fontWeight: 'bold',
    marginBottom: 20,
    color: '#05652D',
    textAlign: 'center',
  },
  categoryOption: {
    paddingVertical: 15,
    paddingHorizontal: 10,
    borderBottomWidth: 1,
    borderBottomColor: '#e1e1e1',
    width: '100%',
  },
  categoryOptionText: {
    fontSize: 16,
    alignItems: 'center',
    justifyContent: 'center',
    color: '#333',
  },
  productDetails: {
    marginVertical: 20,
  },
  productDetailText: {
    fontSize: 18,
    marginBottom: 10,
  },
  productImage: {
    width: '100%',
    height: 200,
    marginBottom: 20,
    borderRadius: 15,
  },
  modalButtons: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 20,
  },
  cancelButton: {
    flex: 1,
    backgroundColor: '#fff',
    padding: 15,
    borderWidth: 1,
    borderRadius: 10,
    borderColor: '#E3E3E3',
    margin: 5,
    alignItems: 'center',
    justifyContent: 'center',
  },
  cancelButtonCategories: {
    backgroundColor: '#E3E3E3',
    paddingVertical: 10,
    paddingHorizontal: 10,
    alignSelf: 'stretch',
    alignItems: 'center',
    justifyContent: 'center',
    borderRadius: 10,
    margin: 20, 
    marginTop: 10,
  },
  submitButton: {
    flex: 1,
    backgroundColor: '#05652D',
    padding: 10,
    borderRadius: 10,
    margin: 5,
    alignItems: 'center',
    justifyContent: 'center',
  },
  submitText: {
    color: '#FFF',
    fontWeight: 'bold',
  },   
  cancelText: {
    color: '#000',
    fontWeight: 'bold',
  }, 
  cancelTextCategories: {
    color: '#000',
    fontSize: 20, 
    fontWeight: 'bold',
  },
  pickerInput: {
    justifyContent: 'center',  
  },
  descriptionInput: {
    height: 100,
    textAlignVertical: 'top', 
  },
  quantityContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    marginBottom: 20,
  },
  quantityButton: {
    padding: 10,
    borderWidth: 1,
    borderColor: '#D3D3D3',
    alignItems: 'center',
    justifyContent: 'center',
  },
  quantityInput: {
    marginHorizontal: 10,
    fontSize: 16,
    minWidth: 40,
    textAlign: 'center',
  }, 
  modalOverlayPhoto: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  modalContainerPhoto: {
    width: '100%',
    backgroundColor: '#05652D',
    padding: 20,
    borderRadius: 10,
    alignItems: 'center',
    justifyContent: 'center',
  },
  cancelButtonTopRight: {
    position: 'absolute',
    top: 10,
    right: 10,
  },
  modalHeader: {
    fontSize: 22,
    fontWeight: 'bold',
    color: '#fff',
    marginBottom: 10,
  },
  modalSubHeader: {
    fontSize: 16,
    color: '#fff',
    marginBottom: 20,
  },
  photoOption: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: 'transparent',
    padding: 10,
    borderRadius: 5,
    marginVertical: 10,
  },
  cancelButtonPhoto: {
    backgroundColor: 'transparent',
    padding: 10,
    borderRadius: 5,
  },
  cancelTextPhoto: {
    color: '#fff',
    fontSize: 18,
  },   
  photoOptionsContainer: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    width: '100%',
    padding: 10,
    marginTop: 20,
  },
  photoOption: {
    alignItems: 'center',
    padding: 10,
  },
  separateBorder: {
    borderWidth: 2,
    borderColor: '#fff',
    borderRadius: 10,
    marginHorizontal: 5,
  },                                                                   
});

export default Sell; */