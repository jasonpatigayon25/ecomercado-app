/* import React, { useState, useEffect } from 'react';
import { useFocusEffect } from '@react-navigation/native';
import { View, Text, StyleSheet, ScrollView, TouchableOpacity, RefreshControl, Alert } from 'react-native';
import Icon from 'react-native-vector-icons/FontAwesome';
import { collection, getDocs, query, where, doc, deleteDoc } from 'firebase/firestore';
import { getAuth } from 'firebase/auth';
import { db } from '../config/firebase';
import AsyncStorage from '@react-native-async-storage/async-storage';

const Notification = ({ navigation }) => {
  const [notifications, setNotifications] = useState([]);
  const [donationRequestApprovals, setDonationRequestApprovals] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  useFocusEffect(
    React.useCallback(() => {
      fetchSettingsAndNotifications();
      fetchDonationRequestApprovals();

      return () => {
      };
    }, [user]) 
  );

  const auth = getAuth();
  const user = auth.currentUser;

  const fetchSettingsAndNotifications = async () => {
    if (user) {
      const userKey = user.email || user.uid;
      const sellingSetting = await AsyncStorage.getItem(`${userKey}_sellingNotifications`);
      const donatingSetting = await AsyncStorage.getItem(`${userKey}_donatingNotifications`);

      const sellingNotificationsEnabled = sellingSetting !== null ? JSON.parse(sellingSetting) : true;
      const donatingNotificationsEnabled = donatingSetting !== null ? JSON.parse(donatingSetting) : true;

      setLoading(true);
      try {
        const q = query(collection(db, 'notifications'), where('email', '==', user.email));
        const querySnapshot = await getDocs(q);
        const fetchedNotifications = querySnapshot.docs
          .map(doc => ({ id: doc.id, ...doc.data() }))
          .filter(notification => {
            if (notification.type === 'buy_sell_order' && !sellingNotificationsEnabled) {
              return false;
            }
            if (notification.type === 'donation_request' && !donatingNotificationsEnabled) {
              return false;
            }
            return true;
          });
        setNotifications(fetchedNotifications);
      } catch (error) {
        console.error('Error fetching notifications: ', error);
        setError(`Error fetching notifications: ${error.message}`);
      } finally {
        setLoading(false);
      }
    } else {
      setError('User not authenticated');
    }
  };

  const fetchDonationRequestApprovals = async () => {
    if (user) {
      setLoading(true);
      try {
        const q = query(collection(db, 'donationRequestApproval'), where('requesterEmail', '==', user.email));
        const querySnapshot = await getDocs(q);
        const fetchedApprovals = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
        setDonationRequestApprovals(fetchedApprovals);
      } catch (error) {
        console.error('Error fetching donation request approvals: ', error);
        setError(`Error fetching donation request approvals: ${error.message}`);
      } finally {
        setLoading(false);
      }
    }
  };

  const renderDonationRequestApprovalItem = (approval) => {
    const iconName = approval.status === 'approved' ? 'check-circle' : 'times-circle';
    const iconColor = approval.status === 'approved' ? "#05652D" : "#FF0000";
    const uniqueKey = `approval-${approval.id}`;
    return (
      <TouchableOpacity
        key={uniqueKey}
        style={styles.notificationItem}
        onLongPress={() => handleDeleteApproval(approval.id)}
        onPress={() => Alert.alert("Donation Request", approval.message)}
      >
        <Icon name={iconName} size={20} color={iconColor} style={styles.notificationIcon} />
        <Text style={styles.notificationText}>{approval.message}</Text>
      </TouchableOpacity>
    );
  };

  useEffect(() => {
    fetchSettingsAndNotifications();
    fetchDonationRequestApprovals();
  }, [user]);

  const handleBackPress = () => {
    navigation.goBack();
  };

  const handleLongPress = async (notificationId) => {
    Alert.alert(
      'Delete Notification',
      'Do you want to delete this notification?',
      [
        { text: 'Cancel', style: 'cancel' },
        {
          text: 'Delete',
          onPress: async () => {
            try {
              await deleteDoc(doc(db, 'notifications', notificationId));
              const updatedNotifications = notifications.filter(notification => notification.id !== notificationId);
              setNotifications(updatedNotifications);
              Alert.alert('Notification Deleted');
            } catch (error) {
              console.error('Error deleting notification: ', error);
              Alert.alert('Error', 'Failed to delete the notification');
            }
          },
        },
      ],
      { cancelable: true }
    );
  };

  const handlePress = (notification) => {
    let message = notification.text; 
    if (notification.type === 'buy_sell_order') {
      message += `\n\nProduct name: ${notification.productName}\nCategory: ${notification.productCategory}\nQuantity you ordered: ${notification.quantityOrdered}\nTotal Cost: ${notification.totalCost}`;
    } else if (notification.type === 'donation_request') {
      message += `\n\nProduct name: ${notification.donationName}\nDonation Location: ${notification.donationLocation}`;
    }
    Alert.alert("Notification Details", message);
  };

  const renderNotificationItem = (notification, index) => {
    let iconName = 'bell'; 
    if (notification.type === 'buy_sell_order') {
        iconName = 'shopping-bag';
    } else if (notification.type === 'donation_request') {
        iconName = 'heart';
    }

    const uniqueKey = `${notification.id}-${index}`;
    return (
        <TouchableOpacity
            key={uniqueKey}
            style={styles.notificationItem}
            onPress={() => handlePress(notification)}
            onLongPress={() => handleLongPress(notification.id)}
        >
            <Icon name={iconName} size={20} color="#05652D" style={styles.notificationIcon} />
            <Text style={styles.notificationText}>{notification.text}</Text>
        </TouchableOpacity>
    );
  };

  const renderNotificationsByCategory = (category) => {
    const filteredNotifications = notifications.filter((notification) => {
      if (category === 'Purchases and Sales') {
        return notification.type === 'buy_sell_order';
      } else if (category === 'Donations') {
        return notification.type === 'donation_request';
      }
      return false;
    });
  
    const notificationItems = filteredNotifications.map((notification, index) => {
      return renderNotificationItem(notification, index);
    });
  
    let approvalItems = [];
    if (category === 'Donations') {
      approvalItems = donationRequestApprovals.map((approval) => {
        return renderDonationRequestApprovalItem(approval);
      });
    }
  
    const combinedItems = [...notificationItems, ...approvalItems];
    if (combinedItems.length === 0) {
      return <Text style={styles.emptyText}>No {category} notifications yet.</Text>;
    }
  
    return combinedItems;
  };

  const handleDeleteApproval = async (approvalId) => {
    Alert.alert(
      'Delete Notification',
      'Do you want to delete this notification?',
      [
        { text: 'Cancel', style: 'cancel' },
        {
          text: 'Delete',
          onPress: async () => {
            try {
              await deleteDoc(doc(db, 'donationRequestApproval', approvalId));
              const updatedApprovals = donationRequestApprovals.filter(approval => approval.id !== approvalId);
              setDonationRequestApprovals(updatedApprovals);
              Alert.alert('Approval Deleted');
            } catch (error) {
              console.error('Error deleting approval: ', error);
              Alert.alert('Error', 'Failed to delete the approval');
            }
          },
        },
      ],
      { cancelable: true }
    );
  };

  return (
    <View style={styles.container}>
      <View style={styles.header}>
        <Icon name="arrow-left" size={24} color="#05652D" style={styles.backButtonIcon} onPress={handleBackPress} />
        <Text style={styles.title}>Notifications</Text>
      </View>
      <ScrollView style={styles.contentContainer} refreshControl={<RefreshControl refreshing={loading} onRefresh={fetchSettingsAndNotifications} />}>
        {error ? <Text style={styles.errorText}>{error}</Text> : null}
        <View style={styles.sectionContainer}>
          <View style={styles.sectionBackground}>
            <Text style={styles.sectionTitle}>Purchases and Sales</Text>
            <View style={styles.divider} />
          </View>
          <View style={styles.sectionContent}>
            {renderNotificationsByCategory('Purchases and Sales')}
          </View>
        </View>
        <View style={styles.sectionContainer}>
          <View style={styles.sectionBackground}>
            <Text style={styles.sectionTitle}>Donations</Text>
            <View style={styles.divider} />
          </View>
          <View style={styles.sectionContent}>
            {renderNotificationsByCategory('Donations')}
          </View>
        </View>
      </ScrollView>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
  },
  header: {
    paddingTop: 10,
    marginBottom: 5,
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#E3FCE9',
    paddingVertical: 10,
    paddingHorizontal: 20,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.3,
    shadowRadius: 2,
    elevation: 3,
  },
  backButtonIcon: {
    marginRight: 10,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#05652D',
    marginLeft: 10,
  },
  divider: {
    height: 1,
    backgroundColor: '#D3D3D3',
    marginBottom: 5,
  },
  contentContainer: {
    flex: 1,
    paddingHorizontal: 10,
  },
  sectionContainer: {
    marginBottom: 10,
  },
  sectionBackground: {
    backgroundColor: '#FFF',
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 10,
    color: '#05652D',
    paddingHorizontal: 10,
    paddingVertical: 5,
  },
  sectionContent: {
    backgroundColor: '#FFF',
    padding: 10,
  },
  notificationText: {
    fontSize: 16,
    color: '#000',
  },
  emptyText: {
    fontSize: 16,
    color: '#000',
  },
  errorText: {
    fontSize: 16,
    color: 'red',
    padding: 10,
  },
  notificationItem: {
    flexDirection: 'row', 
    alignItems: 'center', 
    paddingVertical: 10,
    paddingHorizontal: 10,
  },
  notificationIcon: {
    marginRight: 5,
  },
  centeredView: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    marginTop: 22,
    backgroundColor: 'rgba(0,0,0,0.5)',
  },
  modalView: {
    margin: 20,
    backgroundColor: 'white',
    borderRadius: 20,
    padding: 35,
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.25,
    shadowRadius: 4,
    elevation: 5,
  },
  modalTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    marginBottom: 15,
  },
  modalText: {
    fontSize: 16,
    marginBottom: 10,
  },
  closeButton: {
    backgroundColor: '#2196F3',
    borderRadius: 20,
    padding: 10,
    elevation: 2,
  },
  closeButtonText: {
    color: 'white',
    fontWeight: 'bold',
    textAlign: 'center',
  },
});

export default Notification; */